//142. Linked List Cycle II
// Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
//Problem link : https://leetcode.com/problems/linked-list-cycle-ii/description/



public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next==null) return null;
         ListNode slow = head;
        ListNode fast = head;

        while (fast!=null && fast.next!=null)
        {
            slow = slow.next;
            fast = fast.next.next;

            if(slow == fast)
            {
                break;
            }
        }
        if(fast==null || fast.next==null) return null;
        fast = head;

        while(fast!=slow){
            fast = fast.next;
            slow= slow.next;
        }
        
        return fast;
    }
}
