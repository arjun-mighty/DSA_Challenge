Problem Solved : 22. Generate Parentheses

Problem Link : https://leetcode.com/problems/generate-parentheses/description/

class Solution {
    public List<String> generateParenthesis(int n) {
       List<String> ans = new ArrayList<>();
        generateCombinations(ans, n, 0, 0, "");
        return ans; 
        
    }
    private void generateCombinations(List<String> ans, int n, int open, int close, String currStr) {
        // Base case: if the current string length is 2*n, we have a valid combination
        if (currStr.length() == n * 2) {
            ans.add(currStr);
            return;
        }
        // If we can add an open parenthesis
        if (open < n) {
            generateCombinations(ans, n, open + 1, close, currStr + "(");
        }
        // If we can add a close parenthesis
        if (close < open) {
            generateCombinations(ans, n, open, close + 1, currStr + ")");
        }
    }
}
