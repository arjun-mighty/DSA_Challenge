
//import java.util.Scanner;
 
public class CandiesAndTwoSisters {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
      
        int t = scanner.nextInt();
        
      
        for (int i = 0; i < t; i++) {
            long n = scanner.nextLong();
            long count = 0;
 
            if (n < 3) {
               
                count = 0;
            } else {
                // Calculate the number of valid distributions
                count = (n - 1) - (n / 2);
            }
 
            
            System.out.println(count);
        }
        
        scanner.close();
    }
}

//import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashSet;
import java.util.Set;
 
public class AntonAndLetters {
    public static void main(String[] args) {
        
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        
        try {
            
            String input = reader.readLine();
            
           
            input = input.substring(1, input.length() - 1).trim();
            
            // Set to store unique letters
            Set<Character> uniqueLetters = new HashSet<>();
 
            if (!input.isEmpty()) {
                // Split the string by ", " and add each letter to the set
                String[] letters = input.split(", ");
                for (String letter : letters) {
                    uniqueLetters.add(letter.charAt(0)); 
                }
            }
            
           
            System.out.println(uniqueLetters.size());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

//
class Solution {
    public List<Integer> stableMountains(int[] height, int threshold) {
        
        List<Integer> stableMountains = new ArrayList<>();
        for(int i = 1;i<height.length;i++){
            if(height[i-1] > threshold){
                stableMountains.add(i);
            }
        }
        return stableMountains;
        
    }
}

//class Solution {
    public int findMin(int[] nums) {

        int start = 0;
        int end = nums.length -1;

        while(start<end){
            int mid = start+(end - start)/2;

                if(nums[mid]>nums[end])//min is in right half
                {
                    start = mid+1;
                }
                else{ //left half
                    end = mid;
                }
        }
        return nums[start];
        
    }
}
//class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            
            if (nums[mid] == target) {
                return mid;

            } else if (nums[left] <= nums[mid]) {
                if (nums[left] <= target && target < nums[mid]) {
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
                
            } else {
                if (nums[mid] < target && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        
        return -1;
    }
}
