//#Day34 of My #100DaysOfCodingChallenge: Exploring Bitmanipulation!

//Problem Solved : 78. Subsets

//Problem Link : https://leetcode.com/problems/subsets/description/



class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        
    List<List<Integer>> ans = new ArrayList<>(); // List to hold all subsets
        int n = nums.length; 

        // Iterate through all possible combinations (2^n)
        for (int i = 0; i < (1 << n); i++) {
            List<Integer> subset = new ArrayList<>(); // Create a new subset

            // Check each bit position
            for (int j = 0; j < n; j++) {
                // If the j-th bit of i is set, include nums[j] in the subset
                 if (((1 << j) & i) != 0)  {
                    subset.add(nums[j]);
                }
            }
            ans.add(subset); // Add the current subset to the answer
        }
        return ans; // Return the list of all subsets
    }
}
