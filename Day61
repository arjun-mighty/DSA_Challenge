//A. In Search of an Easy Problem
import java.util.Scanner;
 
public class EasyProblem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        boolean isHard = false;
        
        for (int i = 0; i < n; i++) {
            int opinion = scanner.nextInt();
            if (opinion == 1) {
                isHard = true;
                break;
            }
        }
        
        if (isHard) {
            System.out.println("HARD");
        } else {
            System.out.println("EASY");
        }
    }
}
//George and Accommodation
//https://codeforces.com/problemset/problem/467/A
import java.util.Scanner;
 
public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int count = 0;
 
        for (int i = 0; i < n; i++) {
            int p = scanner.nextInt();
            int q = scanner.nextInt();
            if (q - p >= 2) {
                count++;
            }
        }
 
        System.out.println(count);
        scanner.close();
    }
}
//1886. Determine Whether Matrix Can Be Obtained By Rotation

//https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/description/
class Solution {
    public boolean findRotation(int[][] a, int[][] b) {
       

         int n=a.length;
      int c90=0,c180=0,c270=0,c0=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(b[i][j]==a[n-j-1][i])
                    c90++;
                if(b[i][j]==a[n-i-1][n-j-1])
                    c180++;
                if(b[i][j]==a[j][n-i-1])
                    c270++;
                if(b[i][j]==a[i][j])
                    c0++;
            }
        }
        
        if(c90==n*n||c270==n*n||c180==n*n||c0==n*n)
        return true;
        else return false;
        
    }
}


//1304. Find N Unique Integers Sum up to Zero
//https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/
class Solution {
    public int[] sumZero(int n) {
        int[] res = new int[n]; // Create an array of size n
        
        // If n is odd, add 0 to the result
        if (n % 2 != 0) {
            res[n / 2] = 0; // Place 0 in the middle
        }
        
        // Add pairs of integers
        for (int i = 1; i <= n / 2; i++) {
            res[i - 1] = i;    // Positive integer
            res[n - i] = -i;   // Corresponding negative integer
        }
        
        return res; // Return the result array
    }

}

//53. Maximum Subarray
//https://leetcode.com/problems/maximum-subarray/description/
class Solution {
    public int maxSubArray(int[] nums) {
        int maxSum = Integer.MIN_VALUE;
        int currentSum = 0;
        
        for (int i = 0; i < nums.length; i++) {
            currentSum += nums[i];
            
            if (currentSum > maxSum) {
                maxSum = currentSum;
            }
            
            if (currentSum < 0) {
                currentSum = 0;
            }
        }
        
        return maxSum;
    }
}
