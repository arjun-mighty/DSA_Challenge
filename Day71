//A. Marathon
https://codeforces.com/problemset/problem/1692/A
import java.util.Scanner;
 
public class MarathonParticipants {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        
        for (int i = 0; i < t; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt();
            int d = scanner.nextInt();
            
            int count = 0;
            if (b > a) {
                count++;
            }
            if (c > a) {
                count++;
            }
            if (d > a) {
                count++;
            }
            
            System.out.println(count);
        }
    }
}
//A. Lucky?
https://codeforces.com/problemset/problem/1676/A
import java.util.Scanner;
 
public class LuckyTicket {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
       
        int t = scanner.nextInt();
        scanner.nextLine(); 
        
        for (int i = 0; i < t; i++) {
            String ticket = scanner.nextLine().trim(); 
            
            if (isLucky(ticket)) {
                System.out.println("YES");
            } else {
                System.out.println("NO");
            }
        }
        
        scanner.close();
    }
    
    private static boolean isLucky(String ticket) {
        
        int sumFirstHalf = ticket.charAt(0) + ticket.charAt(1) + ticket.charAt(2) - '0' * 3;
        
        
        int sumSecondHalf = ticket.charAt(3) + ticket.charAt(4) + ticket.charAt(5) - '0' * 3;
        
        
        return sumFirstHalf == sumSecondHalf;
    }
}
//A. Plus or Minus
//https://codeforces.com/problemset/problem/1807/A
import java.util.Scanner;
 
public class PlusOrMinus {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
      
        int t = scanner.nextInt();
        
        for (int i = 0; i < t; i++) {
            int a = scanner.nextInt();
            int b = scanner.nextInt();
            int c = scanner.nextInt(); 
            
          
            if (a + b == c) {
                System.out.println("+");
            } else {
                System.out.println("-");
            }
        }
        
        scanner.close();
    }
}
//A. Division?
https://codeforces.com/problemset/problem/1669/A
import java.util.Scanner;
 
public class Division {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        
        int t = scanner.nextInt();
        
        for (int i = 0; i < t; i++) {
            int rating = scanner.nextInt(); 
            
           
            if (rating >= 1900) {
                System.out.println("Division 1");
            } else if (rating >= 1600) {
                System.out.println("Division 2");
            } else if (rating >= 1400) {
                System.out.println("Division 3");
            } else {
                System.out.println("Division 4");
            }
        }
        
        scanner.close();
    }
}


//1346. Check If N and Its Double Exist
class Solution {
    public boolean checkIfExist(int[] arr) {
            HashSet<Integer> seen = new HashSet<>();
        
       for (int i = 0; i < arr.length; i++) {
            int num = arr[i]; 
            
            if (seen.contains(num * 2)) {
                return true;
            }
           
            if (num % 2 == 0 && seen.contains(num / 2)) {
                return true;
            }
            
            seen.add(num);
        }
        
        return false; 
    }
    
}
//1011. Capacity To Ship Packages Within D Days
class Solution {
    public int shipWithinDays(int[] weights, int days) {

        int left = 0;
        int right = weights.length;
        //int right = 25* 10^6;
         for (int i = 0; i < weights.length; i++) {
             left = Math.max(left, weights[i]);
            right += weights[i];
        }
    
        while(left <= right) {
            int ans = -1;
            int mid = left + (right - left) / 2;


            if (canShip(weights, mid, days)) {
                ans = mid;
                right = mid-1;
            } else {
                left = mid + 1;
            }
        }

        return left;
    }


  public static boolean canShip(int[] weights, int mid, int days) {
    int currentWeightSum = 0;
    int requiredDays = 1;

    for (int i = 0; i < weights.length; i++) {
        currentWeightSum += weights[i];

        if (currentWeightSum > mid) {
            currentWeightSum = weights[i];
            requiredDays++;

            if (requiredDays > days) {
                return false;
            }
        }
    }

    return true;
    }
}
