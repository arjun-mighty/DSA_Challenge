//A. Word
https://codeforces.com/problemset/problem/59/A
package Codeforces;

import java.util.Scanner;

public class Aword {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.nextLine();
        int u = 0;
        int l = 0;


        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (Character.isUpperCase(ch)) {
                u++;
            } else if (Character.isLowerCase(ch)) {
                l++;
            }
        }


        if (u == l) {
            s = s.toLowerCase(); // Convert to lowercase if counts are equal
        } else if (u > l) {
            s = s.toUpperCase(); // Convert to uppercase if there are more uppercase letters
        } else {
            s = s.toLowerCase(); // Convert to lowercase if there are more lowercase letters
        }


        System.out.println(s);
    }
}

//A. Wrong Subtraction
//https://codeforces.com/problemset/problem/977/A
package Codeforces;
import java.util.Scanner;
public class Awrongsub {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int k = sc.nextInt();
        for (int i = 0; i < k; i++) {
            if (n % 10 != 0) {
                n--; // Subtract 1 if the last digit is non-zero
            } else {
                n /= 10; // Divide by 10 if the last digit is zero
            }
        }

        // Output the result
        System.out.println(n);

//
    }
}
//https://leetcode.com/problems/matrix-diagonal-sum/
class Solution {
    public int diagonalSum(int[][] mat) {
        int n = mat.length;
        int totalSum = 0;

        for (int i = 0; i < n; i++) {
            
            totalSum += mat[i][i];
            
            totalSum += mat[i][n - i - 1];
        }

        
        if (n % 2 == 1) {
            int center = n / 2;
            totalSum -= mat[center][center];
        }

        return totalSum;
    }
    
}
//https://leetcode.com/problems/flipping-an-image/description/
class Solution {
    public int[][] flipAndInvertImage(int[][] image) {
         int n = image.length; 

       
        for (int i = 0; i < n; i++) {
            int left = 0; 
            int right = n - 1;
            
            
            while (left < right) {
               
                int temp = image[i][left];
                image[i][left] = image[i][right];
                image[i][right] = temp;
                
                left++; // Move towards the center from the left
                right--; // Move towards the center from the right
            }
        }

        //  Invert the image
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                // Invert the value: 0 becomes 1, and 1 becomes 0
                image[i][j] = image[i][j] ^ 1; 
            }
        }
        
        return image; 
    }
}
    
//https://leetcode.com/problems/find-numbers-with-even-number-of-digits/description/
class Solution {
    public int findNumbers(int[] nums) {
         int[] digitCounts = new int[nums.length];
        int evenDigitCount = 0; 

        
        for (int i = 0; i < nums.length; i++) {
            
            digitCounts[i] = String.valueOf(nums[i]).length();

            
            if (digitCounts[i] % 2 == 0) {
                evenDigitCount++;
            }
        }
        return evenDigitCount;
    }
}

