// https://leetcode.com/problems/binary-search/description/
//704. Binary Search
class Solution {
    public int search(int[] nums, int target) {
        int start = 0;
        int end = nums.length-1;

        while(start<=end){
            int mid = start+(end-start)/2;

            if(target == nums[mid]){
                return mid;
            }
            else if(target < nums[mid]){
                end = mid-1;
            }
            else{
                start = mid+1;
            }
        }
        return -1;
    }
}
//374. Guess Number Higher or Lower
//https://leetcode.com/problems/guess-number-higher-or-lower/description/
/** 
 * Forward declaration of guess API.
 * @param  num   your guess
 * @return 	     -1 if num is higher than the picked number
 *			      1 if num is lower than the picked number
 *               otherwise return 0
 * int guess(int num);
 */

public class Solution extends GuessGame {
    public int guessNumber(int n) {
        int start = 0;
        int end = n;

        while(start<=end){
            int mid = start + (end - start)/2;
            int result = guess(mid);
            if (result == 0) {
                return mid; 
            } else if (result == -1) {
                end = mid - 1; 
            } else {
                start = mid + 1; 
            }

        }
         return -1; 
    }  
}

//
