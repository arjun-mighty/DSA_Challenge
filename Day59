// 867. Transpose Matrix
// https://leetcode.com/problems/transpose-matrix/description/
class Solution {
    public int[][] transpose(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        
        int[][] transposedMatrix = new int[cols][rows];
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                transposedMatrix[j][i] = matrix[i][j];
            }
        }
        
        return transposedMatrix;
    }
}

// A. Translation
https://codeforces.com/problemset/problem/41/A
import java.util.Scanner;
 
public class Atranslation {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
 
      
        String s = sc.nextLine();
        String t = sc.nextLine();
 
        //String reversedS = new StringBuilder(s).reverse().toString();
        String reversedS = reverseString(s);
        
        if (reversedS.equals(t)) {
            System.out.println("YES");
        } else {
            System.out.println("NO");
        }
 
        // Close the scanner
        sc.close();
    }
 
    public static String reverseString(String str) {
        char[] charArray = new char[str.length()];
 
        // Fill the char array with characters from the original string in reverse order
        for (int i = 0; i < str.length(); i++) {
            charArray[i] = str.charAt(str.length() - 1 - i);
        }
 
        // Convert the char array back to a string
        return new String(charArray);
    }
}

//A. Tram
//https://codeforces.com/problemset/problem/116/A
import java.util.Scanner;
 
public class Tram {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        
        int maxPassengers = 0; 
        int currentPassengers = 0;
        
        for (int i = 0; i < n; i++) {
            int exit = scanner.nextInt(); 
            int enter = scanner.nextInt(); 
            
            
            currentPassengers = currentPassengers - exit + enter;
            
            
            if (currentPassengers > maxPassengers) {
                maxPassengers = currentPassengers;
            }
        }
        
        System.out.println(maxPassengers); 
        scanner.close(); 
    }
}

//A. Vanya and Fence
//https://codeforces.com/problemset/problem/677/A
import java.util.Scanner;
public class Avanyafence {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            int n = scanner.nextInt(); // Number of friends
            int h = scanner.nextInt(); // Height of the fence
 
            int totalWidth = 0; 
 
            for (int i = 0; i < n; i++) {
                int height = scanner.nextInt(); 
 
                
                if (height > h) {
                    totalWidth += 2; 
                } else {
                    totalWidth += 1;
                }
            }
 
            System.out.println(totalWidth); 
            scanner.close(); 
        }
    }
 
