 //A. Divisibility Problem
//https://codeforces.com/problemset/problem/1328/A
import java.util.Scanner;
public class Adivisibilitypblm {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
 
        int t = sc.nextInt();
 
        for (int i = 0; i < t; i++) {
            int a = sc.nextInt();
            int b = sc.nextInt();
            int remainder = a % b; // Calculate the remainder
            int moves = remainder == 0 ? 0 : b - remainder;
 
            System.out.println(moves);
 
        }
    }
}
//A. Pangram
//https://codeforces.com/problemset/problem/520/A
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;
 
public class Apanagram {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); 
        sc.nextLine(); 
        String s = sc.nextLine(); 
        sc.close(); 
 
        boolean result = checkIfPangram(s); 
        System.out.println(result ? "YES" : "NO"); 
    }
 
    public static boolean checkIfPangram(String s) {
        Set<Character> set = new HashSet<>();
 
        s = s.toLowerCase(); 
 
        for (char ch : s.toCharArray()) {
            if (ch >= 'a' && ch <= 'z') {
                set.add(ch);
            }
        }
 
        return set.size() == 26; 
    }
}
//A. I Wanna Be the Guy
//https://codeforces.com/problemset/problem/469/A
import java.util.Scanner;
import java.util.HashSet;
 
public class IWantToBeTheGuy {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(); 
        
        
        HashSet<Integer> coveredLevels = new HashSet<>();
        
       
        int p = sc.nextInt();
        for (int i = 0; i < p; i++) {
            coveredLevels.add(sc.nextInt());
        }
        
       
        int q = sc.nextInt();
        for (int i = 0; i < q; i++) {
            coveredLevels.add(sc.nextInt());
        }
        
        sc.close(); class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i = 0;i<matrix.length;i++){
            int left = 0;
            int right = matrix[0].length-1;

            while(left<=right){
                int mid = left +(right - left)/2;
                if(matrix[i][mid]==target){
                    return true;
                }
                else if(matrix[i][mid]<target){
                    left = mid+1;
                }
                else{
                    right = mid-1;
                }
            }
        }
        return false;
    }
}

//69. Sqrt(x)
//https://leetcode.com/problems/sqrtx/
        
   class Solution {
    public int mySqrt(int x) {
        int start = 0;
        int end = x;
         if (x < 2) return x;

        while(start<=end){
            int mid = start+(end-start)/2;
            long midsquared = (long) mid*mid;
            if(midsquared == x)
            {
                return mid;
            }
            else if(midsquared<x){
                 start = mid+1;
            }
            else{
                end = mid-1;
            }
            
        }
        return end;

    }
}
// 74. Search a 2D Matrix
//https://leetcode.com/problems/search-a-2d-matrix/description/
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        for(int i = 0;i<matrix.length;i++){
            int left = 0;
            int right = matrix[0].length-1;

            while(left<=right){
                int mid = left +(right - left)/2;
                if(matrix[i][mid]==target){
                    return true;
                }
                else if(matrix[i][mid]<target){
                    left = mid+1;
                }
                else{
                    right = mid-1;
                }
            }
        }
        return false;
    }
}



